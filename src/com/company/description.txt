Напишите программу - карточную игру "пьяница", в которую могут сыграть до 6-ти игроков.
В начале матча колода перемешивается. Вся колода раздается по одной карте по кругу (кому-то может достаться меньше карт).
Каждый раунд игроки выкладывают на стол по одной карте. Чья карта сильнее, тот забирает стол.
Когда у любого игрока закончатся карты, начинается подсчет очков. Выигрывает игрок, в чьей руке больше суммарный вес карт.

Следуйте рекомендациям:

1. Реализуйте класс Card, представляющий игральную карту, характеризующуюся значениями rank (достоинство) и
suit (масть - diamonds/clubs/hearts/spades). Оба этих значения могут быть целочисленными.
Для хранения rank и suit используйте массивы!

1.1. Реализуйте конструктор с установкой начальных значений, закрытыми полями и методами чтения значений.
Конструктор должен принимать suit и в случае ошибки создавать исключение.
В качестве rank нужно устанавливать maxRank + 1, где maxRank - максимальное известное значение rank. К примеру,
после создания карт масти diamonds с rank = 4, maxRank будет равен 4. При вызове конструктора с указанием только масти
diamonds, будет создана карта с rank =

1.2. Реализуйте метод toString - используйте для вывода названий карт на экран.

1.3. Реализуйте метод hashCode - для генерации уникального hash кода карты.

1.4. Реализуйте метод equals - используйте для проверки равенства карт.

1.5. Добавьте метод проверяющий, что карта принадлежит к стандартной колоде (54 карты).
В качестве джокеров можно принять карты любых двух мастей со значением большим, чем у туза.

1.6. Добавьте метод, проверяющий, является ли текущая карта сильнее другой (масть одинакова, значение больше).

1.7. Добавьте метод, сравнивающий текущую карту с другой. Предполагается, что для мастей clubs < diamonds < spades < hearts.
 Нужно вернуть значение меньше нуля если текущая меньше, 0 если они равны, и значение больше нуля, если текущая больше.

1.8. Добавьте аналогичный (1.6) статический метод, сравнивающий две карты.

2. Реализуйте класс Deck. Реализуйте класс Deck, представляющий стандартную колоду карт.
 Для хранения карт используйте ArrayList. Колода одна, поэтому попробуем паттерн Singlton.
  Оформите статические методы для создания колоды с джокерами, либо без них.

2.1. Реализуйте статический метод для создания колоды с джокерами (54 карты).

2.2. Реализуйте статический метод для создания колоды без джокеров (52 карты).

2.3. Добавьте статический метод, возвращающий случайную карту из колоды.

2.4. Добавьте метод для раздачи карты (извлечения из колоды). Извлеченная карта удаляется из колоды.

2.5. Добавьте метод для перемешивания карт.

2.6. Для сортировки карт реализуйте интерфейс Comparable<Card> в Card, используя добавленный ранее метод сравнения (1.5 + 1.6).

2.7. Добавьте метод для возврата карты в колоду (убедитесь, что карта отсутствует в колоде).

2.8. Добавьте метод для проверки на отсутствие карт в колоде.

2.9. Реализуйте метод toString для показа количества карт в колоде и из названий.

3. Реализуйте класс Player - игрок, которого как-то зовут. Рука игрока представляет собой ArrayList.

3.1. Добавьте метод получения карты.

3.2. Добавьте метод возврата карты в колоду (хоть правилами данный трюк не предусмотрен).

3.3. Добавьте метод розыгрыша карты на стол.

3.4. Добавьте метод сбора карт со стола в случае выигрыша.

3.5. Реализуйте метод toString для показа имени игрока, количества карт на руке и их названий.
4. Реализуйте класс Battle - описывает ход партии.